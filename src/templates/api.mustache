/* tslint:disable */
/* eslint-disable */

/*
* ---------------------------------------------------------------
* ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
* ##                                                           ##
* ## AUTHOR: acacode                                           ##
* ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
* ---------------------------------------------------------------
*/

{{#modelTypes}}

{{#description}}
/**
* {{.}}
*/
{{/description}}
export {{typeIdentifier}} {{name}} {{content}}
{{/modelTypes}}

export type RequestParams = Omit<RequestInit, "body" | "method"> & {
  secure?: boolean;
}

type ApiConfig{{apiConfig.generic}} = {
{{#apiConfig.props}}
  {{name}}{{#optional}}?{{/optional}}: {{type}},
{{/apiConfig.props}}
}

{{#routes}}
{{#outOfModule}}
{{#routes}}

/**
{{#comments}}
* {{.}}
{{/comments}}
*/
export namespace {{pascalName}} {
  export type RequestQuery = {{queryType}};
  export type RequestBody = {{bodyType}};
  export type ResponseBody = {{returnType}};
}
{{/routes}}
{{/outOfModule}}

{{#combined}}
export namespace {{moduleName}} {
  {{#routes}}

  /**
  {{#comments}}
  * {{.}}
  {{/comments}}
  */
  export namespace {{pascalName}} {
    export type RequestQuery = {{queryType}};
    export type RequestBody = {{bodyType}};
    export type ResponseBody = {{returnType}};
  }
  {{/routes}}
}
{{/combined}}
{{/routes}}

{{#apiConfig.description}}
/** {{.}} */
{{/apiConfig.description}}
export class Api{{apiConfig.generic}} {
  
  public baseUrl = "{{apiConfig.baseUrl}}";
  public title = "{{apiConfig.title}}";
  public version = "{{apiConfig.version}}";

  private securityData: SecurityDataType = (null as any);
  private securityWorker: ApiConfig{{apiConfig.generic}}["securityWorker"] = (() => {}) as any
  
  private baseApiParams: RequestParams = {
    credentials: 'same-origin',
    headers: {
      'Content-Type': 'application/json'
    },
    redirect: 'follow',
    referrerPolicy: 'no-referrer',
  }

  constructor({ {{#apiConfig.props}}{{name}},{{/apiConfig.props}} }: ApiConfig{{apiConfig.generic}} = {}) {
  {{#apiConfig.props}}
    this.{{name}} = {{name}} || this.{{name}};
  {{/apiConfig.props}}
  }

  public setSecurityData = (data: SecurityDataType) => {
    this.securityData = data
  }

  {{#hasQueryRoutes}}
  private addQueryParams(query: object): string {
    const keys = Object.keys(query);
    return keys.length ? (
      '?' +
      keys.reduce((paramsArray, param) => [
        ...paramsArray,
        param + '=' + encodeURIComponent(query[param])
      ], []).join('&')
    ) : ''
  }
  {{/hasQueryRoutes}}

  private mergeRequestOptions(params: RequestParams, securityParams?: RequestParams): RequestParams {
    return {
      ...this.baseApiParams,
      ...params,
      ...(securityParams || {}),
      headers: {
        ...(this.baseApiParams.headers || {}),
        ...(params.headers || {}),
        ...((securityParams && securityParams.headers) || {})
      }
    }
  }
  
  private safeParseResponse = <T = any>(response: Response): Promise<T> =>
    response.json()
      .then(data => data)
      .catch(e => response.text);
  
  public request = <T = any>(
    path: string,
    method: string,
    { secure, ...params }: RequestParams = {},
    body?: any,
    secureByDefault?: boolean,
  ): Promise<T> =>
    fetch(`${this.baseUrl}${path}`, {
      // @ts-ignore
      ...this.mergeRequestOptions(params, (secureByDefault || secure) && this.securityWorker(this.securityData)),
      method,
      body: body ? JSON.stringify(body) : null,
    }).then(async response => {
      const data = await this.safeParseResponse<T>(response);
      if (!response.ok) throw data
      return data
    })

{{#routes}}

  {{#outOfModule}}


  /**
  {{#comments}}
   * {{.}}
  {{/comments}}
   */
  {{name}} = ({{#args}}{{name}}{{#optional}}?{{/optional}}: {{type}}, {{/args}}params?: RequestParams) =>
    this.request<{{returnType}}>(`{{path}}{{#hasQuery}}${this.addQueryParams(query)}{{/hasQuery}}`, "{{method}}", params, {{#bodyArg}}{{.}}{{#security}}, {{/security}}{{/bodyArg}}{{#security}}true{{/security}})
  {{/outOfModule}}

  {{#combined}}
  {{moduleName}} = {
    {{#routes}}


    /**
    {{#comments}}
    * {{.}}
    {{/comments}}
    */
    {{name}}: ({{#args}}{{name}}{{#optional}}?{{/optional}}: {{type}}, {{/args}}params?: RequestParams) =>
      this.request<{{returnType}}>(`{{path}}{{#hasQuery}}${this.addQueryParams(query)}{{/hasQuery}}`, "{{method}}", params, {{#bodyArg}}{{.}}{{#security}}, {{/security}}{{/bodyArg}}{{#security}}true{{/security}}),
    {{/routes}}
  }
  {{/combined}}
{{/routes}}

}
