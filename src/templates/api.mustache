/* tslint:disable */
/* eslint-disable */

{{#modelTypes}}
export {{typeIdentifier}} {{name}} {{content}}
{{/modelTypes}}

export type ApiParams = Omit<RequestInit, "body" | "method">

type ApiConfig{{apiConfig.generic}} = {
{{#apiConfig.props}}
  {{name}}{{#optional}}?{{/optional}}: {{type}},
{{/apiConfig.props}}
}



export class Api{{apiConfig.generic}} {
  
  public baseUrl = "{{apiConfig.baseUrl}}";
  public title = "{{apiConfig.title}}";
  public version = "{{apiConfig.version}}";
  
  {{#hasSecurityRoutes}}private securityData: SecurityDataType = (null as any);{{/hasSecurityRoutes}}
  {{#hasSecurityRoutes}}private securityWorker: ApiConfig{{apiConfig.generic}}["securityWorker"] = (() => {}) as any{{/hasSecurityRoutes}}
  
  private baseApiParams: ApiParams = {
    credentials: 'same-origin',
    headers: {
      'Content-Type': 'application/json'
    },
    redirect: 'follow',
    referrerPolicy: 'no-referrer',
  }

  constructor({ {{#apiConfig.props}}{{name}},{{/apiConfig.props}} }: ApiConfig{{apiConfig.generic}} = {}) {
  {{#apiConfig.props}}
    this.{{name}} = {{name}} || this.{{name}};
  {{/apiConfig.props}}
  }

  {{#hasSecurityRoutes}}
  public setSecurityData = (data: SecurityDataType) => {
    this.securityData = data
  }
  {{/hasSecurityRoutes}}

  {{#hasQueryRoutes}}
  private addQueryParams(query: object): string {
    const keys = Object.keys(query);
    return keys.length ? (
      '?' +
      keys.reduce(function(paramsArray, param) {
        paramsArray.push(param + '=' + encodeURIComponent(query[param]))
        return paramsArray
      }, []).join('&')
    ) : ''
  }
  {{/hasQueryRoutes}}

  private mergeRequestOptions(params: ApiParams{{#hasSecurityRoutes}}, securityParams?: ApiParams{{/hasSecurityRoutes}}): ApiParams {
    return {
      ...this.baseApiParams,
      ...params,
      {{#hasSecurityRoutes}}...(securityParams || {}),{{/hasSecurityRoutes}}
      headers: {
        ...(this.baseApiParams.headers || {}),
        ...(params.headers || {}),
        {{#hasSecurityRoutes}}...((securityParams && securityParams.headers) || {}){{/hasSecurityRoutes}}
      }
    }
  }
  
  public request = <T = any>(path: string, method: string, params: ApiParams = {}, body?: any, {{#hasSecurityRoutes}}isSecure?: boolean{{/hasSecurityRoutes}}): Promise<T> =>
    fetch(`${this.baseUrl}${path}`, {
      // @ts-ignore
      ...this.mergeRequestOptions(params{{#hasSecurityRoutes}}, isSecure && this.securityWorker(this.securityData){{/hasSecurityRoutes}}),
      method,
      body: body ? JSON.stringify(body) : null,
    }).then(response => response.json())

{{#routes}}

  {{#outOfModule}}


  /**
  {{#comments}}
   * {{.}}
  {{/comments}}
   */
  {{name}} = ({{#args}}{{name}}{{#optional}}?{{/optional}}: {{type}}, {{/args}}params: ApiParams = {}) =>
    this.request<{{returnType}}>(`{{path}}{{#hasQuery}}${this.addQueryParams(query)}{{/hasQuery}}`, "{{method}}", params, {{#bodyArg}}{{.}}{{#security}}, {{/security}}{{/bodyArg}}{{#security}}true{{/security}})
  {{/outOfModule}}

  {{#combined}}
    {{moduleName}} = {
      {{#routes}}


        /**
        {{#comments}}
        * {{.}}
        {{/comments}}
        */
        {{name}}: ({{#args}}{{name}}{{#optional}}?{{/optional}}: {{type}}, {{/args}}params: ApiParams = {}) =>
          this.request<{{returnType}}>(`{{path}}{{#hasQuery}}${this.addQueryParams(query)}{{/hasQuery}}`, "{{method}}", params, {{#bodyArg}}{{.}}{{#security}}, {{/security}}{{/bodyArg}}{{#security}}true{{/security}}),
      {{/routes}}
    }
  {{/combined}}
{{/routes}}

}
